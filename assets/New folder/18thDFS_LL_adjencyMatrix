// Implementations of Depth First Search (DFS) program using stack (linked list)  and adjacency matrix.

#include <stdio.h>
#include <stdlib.h>
#define size 100
struct stack
{
    int data;
    struct stack *next;
};
struct stack *top;
int a[size][size];
int vi[size];
void push(int val)
{
    struct stack *ptr = (struct stack *)malloc(sizeof(struct stack));
    ptr->data = val;
    if (top == NULL)
    {
        ptr->next = NULL;
        top = ptr;
        return;
    }
    ptr->next = top;
    top = ptr;

    return;
}
int pop()
{
    struct stack *hp = top;
    int val;
    val = top->data;
    if (top == NULL)
    {
        return 0;
    }
    top = top->next;
    free(hp);
    return val;
}
void dfs(int s, int n)
{
    int i, j, p;
    push(s);
    vi[s] = 1;
    p = pop();
    if (p != 0)
    {
        printf("%d\t ", p);
    }
    while (p != 0)
    {
    for(i=1;i<=n;i++)
    {
            if (a[p][i] != 0 && vi[i] == 0)
            {
                push(i);
                vi[i] = 1;
            }
    }
        p=pop();
        if(p!=0)
        {
            printf("%d\t", p);
        }
    }
}
void main()
{
    int v, e, i, j, v1, v2, s;
    struct stack *top = NULL;
    printf("Enter the total number of vertices and edges: ");
    scanf("%d%d", &v, &e);
    for (i = 1; i <= v; i++)
    {
        vi[i] = 0;
    }
    for (i = 1; i <= v; i++)
    {
        for (j = 1; j <= v; j++)
        {
            a[i][j] = 0;
        }
    }
    for (i = 1; i <= e; i++)

    {
        printf("\nEnter the pair of vertices:");
        scanf("%d%d", &v1, &v2);
        a[v1][v2] = a[v2][v1] = 1;
    }
    printf("\nAdjacent matrix\n");
    for (i = 1; i <= v; i++)
    {
        for (j = 1; j <= v; j++)
            printf("%4d", a[i][j]);
        printf("\n");
    }
    printf("\nEnter the source node: ");
    scanf("%d", &s);
    dfs(s, v);
}